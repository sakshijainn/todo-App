{"ast":null,"code":"var _jsxFileName = \"/Users/aniketjain/Desktop/SAKSHIJAIN/revise/todo/src/components/TodoList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //to get the data  from Local-Storage\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getLocalItems = () => {\n  let list = localStorage.getItem(\"lists\");\n\n  if (list) {\n    return JSON.parse(localStorage.getItem(\"lists\"));\n  } else {\n    return [];\n  }\n};\n\nfunction TodoList() {\n  _s();\n\n  const [todo, setTodo] = useState([getLocalItems()]);\n  const [input, setInput] = useState(\"\");\n  const [toggleSubmit, setToggleSubmit] = useState(true);\n  const [isEditItem, setIsEditItem] = useState(null);\n\n  const inputHandler = e => {\n    setInput(e.target.value);\n  };\n\n  const todoHandler = input => {\n    if (!input) {\n      alert(\"please fill data\");\n    } else if (input && !toggleSubmit) {\n      setTodo(todo.map(elem => {\n        if (elem.id === isEditItem) {\n          return { ...elem,\n            name: input\n          };\n        }\n\n        return elem;\n      }));\n      setToggleSubmit(true);\n      setInput(\"\");\n      setIsEditItem(null);\n    } else {\n      const AllInput = {\n        id: new Date().getTime().toString(),\n        name: input\n      };\n      console.log(AllInput); // const updatedTodo = [AllInput, ...todo];\n\n      setTodo(xyz => {\n        return [...xyz, AllInput];\n      });\n      setInput(\"\");\n    }\n  };\n\n  const removeHandler = index => {\n    console.log(index);\n    const updatedItems = todo.filter(elem => {\n      return index !== elem.id;\n    });\n    setTodo(updatedItems);\n  };\n\n  const editItem = id => {\n    let newEditItem = todo.find(elem => {\n      return elem.id === id;\n    });\n    console.log(newEditItem);\n    setToggleSubmit(false);\n    setInput(newEditItem.name);\n    setIsEditItem(id);\n  }; //add data to localstorage\n\n\n  useEffect(() => {\n    localStorage.setItem(\"lists\", JSON.stringify(todo));\n  }, [todo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Hello TodoList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: input,\n      onChange: inputHandler,\n      type: \"text\",\n      placeholder: \"what is the todo?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), toggleSubmit ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => todoHandler(input),\n      children: \"Add to do\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => todoHandler(input),\n      children: \"Update Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), todo.map(elem => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: elem.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => removeHandler(elem.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            editItem(elem.id);\n          },\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, elem.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TodoList, \"62s2HJnA5IEK0sHgqZIMHVutZRU=\");\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["/Users/aniketjain/Desktop/SAKSHIJAIN/revise/todo/src/components/TodoList.js"],"names":["React","useState","useEffect","getLocalItems","list","localStorage","getItem","JSON","parse","TodoList","todo","setTodo","input","setInput","toggleSubmit","setToggleSubmit","isEditItem","setIsEditItem","inputHandler","e","target","value","todoHandler","alert","map","elem","id","name","AllInput","Date","getTime","toString","console","log","xyz","removeHandler","index","updatedItems","filter","editItem","newEditItem","find","setItem","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;;;AACA,MAAMC,aAAa,GAAG,MAAM;AAC1B,MAAIC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX;;AAEA,MAAIF,IAAJ,EAAU;AACR,WAAOG,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CARD;;AAUA,SAASG,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,CAACE,aAAa,EAAd,CAAD,CAAhC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,IAAD,CAA5C;;AAEA,QAAMiB,YAAY,GAAIC,CAAD,IAAO;AAC1BN,IAAAA,QAAQ,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD,GAFD;;AAGA,QAAMC,WAAW,GAAIV,KAAD,IAAW;AAC7B,QAAI,CAACA,KAAL,EAAY;AACVW,MAAAA,KAAK,CAAC,kBAAD,CAAL;AACD,KAFD,MAEO,IAAIX,KAAK,IAAI,CAACE,YAAd,EAA4B;AACjCH,MAAAA,OAAO,CACLD,IAAI,CAACc,GAAL,CAAUC,IAAD,IAAU;AACjB,YAAIA,IAAI,CAACC,EAAL,KAAYV,UAAhB,EAA4B;AAC1B,iBAAO,EAAE,GAAGS,IAAL;AAAWE,YAAAA,IAAI,EAAEf;AAAjB,WAAP;AACD;;AACD,eAAOa,IAAP;AACD,OALD,CADK,CAAP;AAQAV,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAF,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAI,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAZM,MAYA;AACL,YAAMW,QAAQ,GAAG;AAAEF,QAAAA,EAAE,EAAE,IAAIG,IAAJ,GAAWC,OAAX,GAAqBC,QAArB,EAAN;AAAuCJ,QAAAA,IAAI,EAAEf;AAA7C,OAAjB;AACAoB,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAFK,CAGL;;AACAjB,MAAAA,OAAO,CAAEuB,GAAD,IAAS;AACf,eAAO,CAAC,GAAGA,GAAJ,EAASN,QAAT,CAAP;AACD,OAFM,CAAP;AAIAf,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD;AACF,GAzBD;;AA2BA,QAAMsB,aAAa,GAAIC,KAAD,IAAW;AAC/BJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACA,UAAMC,YAAY,GAAG3B,IAAI,CAAC4B,MAAL,CAAab,IAAD,IAAU;AACzC,aAAOW,KAAK,KAAKX,IAAI,CAACC,EAAtB;AACD,KAFoB,CAArB;AAGAf,IAAAA,OAAO,CAAC0B,YAAD,CAAP;AACD,GAND;;AAQA,QAAME,QAAQ,GAAIb,EAAD,IAAQ;AACvB,QAAIc,WAAW,GAAG9B,IAAI,CAAC+B,IAAL,CAAWhB,IAAD,IAAU;AACpC,aAAOA,IAAI,CAACC,EAAL,KAAYA,EAAnB;AACD,KAFiB,CAAlB;AAGAM,IAAAA,OAAO,CAACC,GAAR,CAAYO,WAAZ;AACAzB,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAF,IAAAA,QAAQ,CAAC2B,WAAW,CAACb,IAAb,CAAR;AACAV,IAAAA,aAAa,CAACS,EAAD,CAAb;AACD,GARD,CA5CkB,CAsDlB;;;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,YAAY,CAACqC,OAAb,CAAqB,OAArB,EAA8BnC,IAAI,CAACoC,SAAL,CAAejC,IAAf,CAA9B;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,KAAK,EAAEE,KADT;AAEE,MAAA,QAAQ,EAAEM,YAFZ;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,YAFF,EAQGJ,YAAY,gBACX;AAAQ,MAAA,OAAO,EAAE,MAAMQ,WAAW,CAACV,KAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADW,gBAGX;AAAQ,MAAA,OAAO,EAAE,MAAMU,WAAW,CAACV,KAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ,EAcGF,IAAI,CAACc,GAAL,CAAUC,IAAD,IAAU;AAClB,0BACE;AAAA,gCACE;AAAA,oBAAKA,IAAI,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,OAAO,EAAE,MAAMQ,aAAa,CAACV,IAAI,CAACC,EAAN,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AACE,UAAA,OAAO,EAAE,MAAM;AACba,YAAAA,QAAQ,CAACd,IAAI,CAACC,EAAN,CAAR;AACD,WAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA,SAAUD,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA,cADF;AAaD,KAdA,CAdH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD;;GA3FQjB,Q;;KAAAA,Q;AA6FT,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n//to get the data  from Local-Storage\nconst getLocalItems = () => {\n  let list = localStorage.getItem(\"lists\");\n\n  if (list) {\n    return JSON.parse(localStorage.getItem(\"lists\"));\n  } else {\n    return [];\n  }\n};\n\nfunction TodoList() {\n  const [todo, setTodo] = useState([getLocalItems()]);\n  const [input, setInput] = useState(\"\");\n  const [toggleSubmit, setToggleSubmit] = useState(true);\n  const [isEditItem, setIsEditItem] = useState(null);\n\n  const inputHandler = (e) => {\n    setInput(e.target.value);\n  };\n  const todoHandler = (input) => {\n    if (!input) {\n      alert(\"please fill data\");\n    } else if (input && !toggleSubmit) {\n      setTodo(\n        todo.map((elem) => {\n          if (elem.id === isEditItem) {\n            return { ...elem, name: input };\n          }\n          return elem;\n        })\n      );\n      setToggleSubmit(true);\n      setInput(\"\");\n      setIsEditItem(null);\n    } else {\n      const AllInput = { id: new Date().getTime().toString(), name: input };\n      console.log(AllInput);\n      // const updatedTodo = [AllInput, ...todo];\n      setTodo((xyz) => {\n        return [...xyz, AllInput];\n      });\n\n      setInput(\"\");\n    }\n  };\n\n  const removeHandler = (index) => {\n    console.log(index);\n    const updatedItems = todo.filter((elem) => {\n      return index !== elem.id;\n    });\n    setTodo(updatedItems);\n  };\n\n  const editItem = (id) => {\n    let newEditItem = todo.find((elem) => {\n      return elem.id === id;\n    });\n    console.log(newEditItem);\n    setToggleSubmit(false);\n    setInput(newEditItem.name);\n    setIsEditItem(id);\n  };\n\n  //add data to localstorage\n  useEffect(() => {\n    localStorage.setItem(\"lists\", JSON.stringify(todo));\n  }, [todo]);\n\n  return (\n    <div>\n      <h3>Hello TodoList</h3>\n      <input\n        value={input}\n        onChange={inputHandler}\n        type=\"text\"\n        placeholder=\"what is the todo?\"\n      />\n      {toggleSubmit ? (\n        <button onClick={() => todoHandler(input)}>Add to do</button>\n      ) : (\n        <button onClick={() => todoHandler(input)}>Update Item</button>\n      )}\n\n      {todo.map((elem) => {\n        return (\n          <div key={elem.id}>\n            <h3>{elem.name}</h3>\n            <button onClick={() => removeHandler(elem.id)}>Delete</button>\n            <button\n              onClick={() => {\n                editItem(elem.id);\n              }}\n            >\n              Edit\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}